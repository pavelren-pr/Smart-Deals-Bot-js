require('dotenv').config();
const { Bot, session, GrammyError, HttpError } = require('grammy');
const { hydrate } = require('@grammyjs/hydrate');

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤
const constants = require('./config/constants');
const prices = require('./config/prices');
const keyboards = require('./config/keyboard-templates');

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

const userLastMessages = new Map(); 
const subscriptionCache = new Map();

bot.api.setMyCommands(constants.BOT_COMMANDS);

// Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
bot.use(async (ctx, next) => {
  if (ctx.message?.text?.startsWith('/start') || ctx.callbackQuery) {
    return next();
  }

  // ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º constants.SUBSCRIPTION
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command('start', async (ctx) => {
  await ctx.react('‚ù§‚Äçüî•');
  await ctx.reply(constants.RESPONSES.START, {
    parse_mode: 'HTML',
    reply_markup: keyboards.subscriptionCheck
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.hears('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ä–∞–±–æ—Ç üóÉ', async (ctx) => {
  await ctx.reply(constants.RESPONSES.CATALOG, {
    reply_markup: keyboards.courseSelection
  });
});

bot.hears('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã üïä', async (ctx) => {
  await ctx.reply(constants.RESPONSES.FREE_MATERIALS, {
    reply_markup: keyboards.freeMaterials
  });
});

// ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.catch((err) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
});

bot.start();